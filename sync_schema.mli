(* autogenerated by sql_orm *)
(** Use the [[Init]] module to open a new database handle.  Each object type has its own module with functions to create, modify, save and destroy objects of that type into the SQLite database
  *)
exception Sql_error of (Sqlite3.Rc.t * string)
module Init : sig
  type t
  type transaction_mode = [`Exclusive |`Deferred |`Immediate ]
  (** Database handle which can be used to create and retrieve objects
    *)
  val t :
    ?busyfn:(Sqlite3.db -> unit) -> ?mode:transaction_mode ->
    string -> t
  (** [t db_name] open a Sqlite3 database with filename [db_name] and create any tables if they are missing. @return a database handle which can be used to create and retrieve objects in the database.
   @raise Sql_error if a database error is encountered
    *)
  val db: t -> Sqlite3.db
  (** [db handle] @return the underlying Sqlite3 database handle for the connection, for advanced queries.
    *)
end
module Dircache : sig
  type t = <
    id : int64 option;
    set_id : int64 option -> unit;
    dir : string;
    set_dir : string -> unit;
    mtime : float;
    set_mtime : float -> unit;
    save: int64; delete: unit
  >

  (** An object which can be stored in the database with the [save] method call, or removed by calling [delete].  Fields can be accessed via the approriate named method and set via the [set_] methods.  Changes are not committed to the database until [save] is invoked.
    *)

  val t :
    ?id:int64 option ->
    dir:string ->
    mtime:float ->
    Init.t -> t
  (** Can be used to construct a new object.  If [id] is not specified, it will be automatically assigned the first time [save] is called on the object.  The object is not committed to the database until [save] is invoked.  The [save] method will also return the [id] assigned to the object.
   @raise Sql_error if a database error is encountered
    *)

  val get :
    ?id:int64 option ->
    ?dir:string option ->
    ?mtime:float option ->
    ?custom_where:string * Sqlite3.Data.t list -> Init.t -> t list
  (** Used to retrieve objects from the database.  If an argument is specified, it is included in the search criteria (all fields are ANDed together).
   @raise Sql_error if a database error is encountered
    *)

end
module Filter_rule : sig
  type t = <
    id : int64 option;
    set_id : int64 option -> unit;
    name : string;
    set_name : string -> unit;
    body : string;
    set_body : string -> unit;
    zorder : int64;
    set_zorder : int64 -> unit;
    save: int64; delete: unit
  >

  (** An object which can be stored in the database with the [save] method call, or removed by calling [delete].  Fields can be accessed via the approriate named method and set via the [set_] methods.  Changes are not committed to the database until [save] is invoked.
    *)

  val t :
    ?id:int64 option ->
    name:string ->
    body:string ->
    zorder:int64 ->
    Init.t -> t
  (** Can be used to construct a new object.  If [id] is not specified, it will be automatically assigned the first time [save] is called on the object.  The object is not committed to the database until [save] is invoked.  The [save] method will also return the [id] assigned to the object.
   @raise Sql_error if a database error is encountered
    *)

  val get :
    ?id:int64 option ->
    ?name:string option ->
    ?body:string option ->
    ?zorder:int64 option ->
    ?custom_where:string * Sqlite3.Data.t list -> Init.t -> t list
  (** Used to retrieve objects from the database.  If an argument is specified, it is included in the search criteria (all fields are ANDed together).
   @raise Sql_error if a database error is encountered
    *)

end
module User : sig
  type t = <
    id : int64 option;
    set_id : int64 option -> unit;
    uid : string;
    set_uid : string -> unit;
    ip : string;
    set_ip : string -> unit;
    port : int64;
    set_port : int64 -> unit;
    key : string;
    set_key : string -> unit;
    last_sync : float;
    set_last_sync : float -> unit;
    has_guids : string;
    set_has_guids : string -> unit;
    sent_guids : string;
    set_sent_guids : string -> unit;
    filters : Filter_rule.t list;
    set_filters : Filter_rule.t list -> unit;
    save: int64; delete: unit
  >

  (** An object which can be stored in the database with the [save] method call, or removed by calling [delete].  Fields can be accessed via the approriate named method and set via the [set_] methods.  Changes are not committed to the database until [save] is invoked.
    *)

  val t :
    ?id:int64 option ->
    uid:string ->
    ip:string ->
    port:int64 ->
    key:string ->
    last_sync:float ->
    has_guids:string ->
    sent_guids:string ->
    filters:Filter_rule.t list ->
    Init.t -> t
  (** Can be used to construct a new object.  If [id] is not specified, it will be automatically assigned the first time [save] is called on the object.  The object is not committed to the database until [save] is invoked.  The [save] method will also return the [id] assigned to the object.
   @raise Sql_error if a database error is encountered
    *)

  val get :
    ?id:int64 option ->
    ?uid:string option ->
    ?ip:string option ->
    ?port:int64 option ->
    ?key:string option ->
    ?last_sync:float option ->
    ?has_guids:string option ->
    ?sent_guids:string option ->
    ?custom_where:string * Sqlite3.Data.t list -> Init.t -> t list
  (** Used to retrieve objects from the database.  If an argument is specified, it is included in the search criteria (all fields are ANDed together).
   @raise Sql_error if a database error is encountered
    *)

end
